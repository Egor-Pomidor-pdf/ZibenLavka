{"ast":null,"code":"var _jsxFileName = \"/Users/egortujmukov/Desktop/React/GameShopping/gameshop/src/pages/EmailConfirmationPage/EmailConfirmationPage.tsx\";\nimport axios from 'axios';\nimport React, { useEffect, useState } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EmailConfirmationPage = () => {\n  const {\n    uidb64,\n    token\n  } = useParams();\n  const navigate = useNavigate();\n  const [isError, setIsError] = useState(true);\n  const [status, setStatus] = useState(\"loading\");\n  const [message, setMessage] = useState(\"\");\n  useEffect(() => {\n    const confirmEmail = async () => {\n      try {\n        const response = await axios.post('/api/v1/auth/verify-email/', {\n          uidb64,\n          token\n        });\n        if (response.data.message === \"User is registered\") {\n          setMessage(\"Email подтверждён!\");\n          navigate('/login');\n        }\n      } catch (error) {\n        console.log(error.message);\n      }\n    };\n    confirmEmail();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      maxWidth: '500px',\n      margin: '2rem auto',\n      marginTop: \"100px\",\n      padding: '2rem',\n      textAlign: 'center',\n      backgroundColor: isError ? '#ffeeee' : '#f0fff0',\n      border: `1px solid ${isError ? '#ff0000' : '#00aa00'}`,\n      borderRadius: '8px'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: isError ? 'Ошибка' : 'Успех'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }, this), isError && /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => navigate('/reg'),\n      style: {\n        padding: '0.5rem 1rem',\n        backgroundColor: '#007bff',\n        color: 'white',\n        border: 'none',\n        borderRadius: '4px',\n        cursor: 'pointer'\n      },\n      children: \"\\u0412\\u0435\\u0440\\u043D\\u0443\\u0442\\u044C\\u0441\\u044F \\u043A \\u0440\\u0435\\u0433\\u0438\\u0441\\u0442\\u0440\\u0430\\u0446\\u0438\\u0438\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 9\n  }, this);\n};\nexport default EmailConfirmationPage;\n\n// if (error.response) {\n//     switch (error.response.data.error) {\n//         case \"Invalid token\":\n//             setMessage(\"Неверная ссылка подтверждения\");\n//             break;\n//         case \"user not found\":\n//             setMessage(\"Пользователь не найден\");\n//             break;\n//         default:\n//             setMessage(`Ошибка: ${error.response.data.error || \"Unknown error\"}`);\n//     }\n// } else {\n//     // Ошибки сети (сервер не ответил)\n//     setMessage(\"Ошибка соединения с сервером\");\n// }","map":{"version":3,"names":["axios","React","useEffect","useState","useNavigate","useParams","jsxDEV","_jsxDEV","EmailConfirmationPage","uidb64","token","navigate","isError","setIsError","status","setStatus","message","setMessage","confirmEmail","response","post","data","error","console","log","style","maxWidth","margin","marginTop","padding","textAlign","backgroundColor","border","borderRadius","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","color","cursor"],"sources":["/Users/egortujmukov/Desktop/React/GameShopping/gameshop/src/pages/EmailConfirmationPage/EmailConfirmationPage.tsx"],"sourcesContent":["import axios, { AxiosError } from 'axios';\nimport React, { useEffect, useState } from 'react';\nimport { ErrorResponse, useNavigate, useParams } from 'react-router-dom';\nimport cl from \"./EmailConfirmationPage.module.css\"\n\nconst EmailConfirmationPage = () => {\n    const { uidb64, token } = useParams();\n    const navigate = useNavigate();\n    const [isError, setIsError] = useState<boolean>(true)\n\n    const [status, setStatus] = useState(\"loading\")\n    const [message, setMessage] = useState<string>(\"\")\n\n\n\n    useEffect(() => {\n        const confirmEmail = async () => {\n            try {\n                const response = await axios.post('/api/v1/auth/verify-email/', { uidb64, token })\n                if (response.data.message === \"User is registered\") {\n                    setMessage(\"Email подтверждён!\");\n                    navigate('/login');\n                }\n            } catch (error: any) {\n                console.log(error.message);\n\n            }\n        }\n        confirmEmail(); \n    }, [])\n\n\n\n    return (\n        <div\n            style={{\n                maxWidth: '500px',\n                margin: '2rem auto',\n                marginTop: \"100px\",\n                padding: '2rem',\n                textAlign: 'center',\n                backgroundColor: isError ? '#ffeeee' : '#f0fff0',\n                border: `1px solid ${isError ? '#ff0000' : '#00aa00'}`,\n                borderRadius: '8px'\n            }}>\n            <h2>{isError ? 'Ошибка' : 'Успех'}</h2>\n            <p>{message}</p>\n\n            {isError && (\n                <button\n                    onClick={() => navigate('/reg')}\n                    style={{\n                        padding: '0.5rem 1rem',\n                        backgroundColor: '#007bff',\n                        color: 'white',\n                        border: 'none',\n                        borderRadius: '4px',\n                        cursor: 'pointer'\n                    }}\n                >\n                    Вернуться к регистрации\n                </button>\n            )}\n        </div>\n    );\n\n};\n\nexport default EmailConfirmationPage;\n\n\n// if (error.response) {\n//     switch (error.response.data.error) {\n//         case \"Invalid token\":\n//             setMessage(\"Неверная ссылка подтверждения\");\n//             break;\n//         case \"user not found\":\n//             setMessage(\"Пользователь не найден\");\n//             break;\n//         default:\n//             setMessage(`Ошибка: ${error.response.data.error || \"Unknown error\"}`);\n//     }\n// } else {\n//     // Ошибки сети (сервер не ответил)\n//     setMessage(\"Ошибка соединения с сервером\");\n// }"],"mappings":";AAAA,OAAOA,KAAK,MAAsB,OAAO;AACzC,OAAOC,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAAwBC,WAAW,EAAEC,SAAS,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAGzE,MAAMC,qBAAqB,GAAGA,CAAA,KAAM;EAChC,MAAM;IAAEC,MAAM;IAAEC;EAAM,CAAC,GAAGL,SAAS,CAAC,CAAC;EACrC,MAAMM,QAAQ,GAAGP,WAAW,CAAC,CAAC;EAC9B,MAAM,CAACQ,OAAO,EAAEC,UAAU,CAAC,GAAGV,QAAQ,CAAU,IAAI,CAAC;EAErD,MAAM,CAACW,MAAM,EAAEC,SAAS,CAAC,GAAGZ,QAAQ,CAAC,SAAS,CAAC;EAC/C,MAAM,CAACa,OAAO,EAAEC,UAAU,CAAC,GAAGd,QAAQ,CAAS,EAAE,CAAC;EAIlDD,SAAS,CAAC,MAAM;IACZ,MAAMgB,YAAY,GAAG,MAAAA,CAAA,KAAY;MAC7B,IAAI;QACA,MAAMC,QAAQ,GAAG,MAAMnB,KAAK,CAACoB,IAAI,CAAC,4BAA4B,EAAE;UAAEX,MAAM;UAAEC;QAAM,CAAC,CAAC;QAClF,IAAIS,QAAQ,CAACE,IAAI,CAACL,OAAO,KAAK,oBAAoB,EAAE;UAChDC,UAAU,CAAC,oBAAoB,CAAC;UAChCN,QAAQ,CAAC,QAAQ,CAAC;QACtB;MACJ,CAAC,CAAC,OAAOW,KAAU,EAAE;QACjBC,OAAO,CAACC,GAAG,CAACF,KAAK,CAACN,OAAO,CAAC;MAE9B;IACJ,CAAC;IACDE,YAAY,CAAC,CAAC;EAClB,CAAC,EAAE,EAAE,CAAC;EAIN,oBACIX,OAAA;IACIkB,KAAK,EAAE;MACHC,QAAQ,EAAE,OAAO;MACjBC,MAAM,EAAE,WAAW;MACnBC,SAAS,EAAE,OAAO;MAClBC,OAAO,EAAE,MAAM;MACfC,SAAS,EAAE,QAAQ;MACnBC,eAAe,EAAEnB,OAAO,GAAG,SAAS,GAAG,SAAS;MAChDoB,MAAM,EAAE,aAAapB,OAAO,GAAG,SAAS,GAAG,SAAS,EAAE;MACtDqB,YAAY,EAAE;IAClB,CAAE;IAAAC,QAAA,gBACF3B,OAAA;MAAA2B,QAAA,EAAKtB,OAAO,GAAG,QAAQ,GAAG;IAAO;MAAAuB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eACvC/B,OAAA;MAAA2B,QAAA,EAAIlB;IAAO;MAAAmB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EAEf1B,OAAO,iBACJL,OAAA;MACIgC,OAAO,EAAEA,CAAA,KAAM5B,QAAQ,CAAC,MAAM,CAAE;MAChCc,KAAK,EAAE;QACHI,OAAO,EAAE,aAAa;QACtBE,eAAe,EAAE,SAAS;QAC1BS,KAAK,EAAE,OAAO;QACdR,MAAM,EAAE,MAAM;QACdC,YAAY,EAAE,KAAK;QACnBQ,MAAM,EAAE;MACZ,CAAE;MAAAP,QAAA,EACL;IAED;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CACX;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACA,CAAC;AAGd,CAAC;AAED,eAAe9B,qBAAqB;;AAGpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}